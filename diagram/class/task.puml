@startuml
package "task" {
	interface "Factory" as task.Factory {
		+Close(task: task.Task): task.Task
		+Complete(task: task.Task): task.Task
		+New(id: int, title: string, description: string, state: task.State): task.Task
		+Pause(task: task.Task): task.Task
		+Start(task: task.Task): task.Task
		+Stop(task: task.Task): task.Task
	}
}


	task.Factory ..> task.Task : <<use>> 
	task.Factory ..> task.Task : <<return>> 
	task.Factory ..> task.Task : <<use>> 
	task.Factory ..> task.Task : <<return>> 
	task.Factory ..> task.State : <<use>> 
	task.Factory ..> task.Task : <<return>> 
	task.Factory ..> task.Task : <<use>> 
	task.Factory ..> task.Task : <<return>> 
	task.Factory ..> task.Task : <<use>> 
	task.Factory ..> task.Task : <<return>> 
	task.Factory ..> task.Task : <<use>> 
	task.Factory ..> task.Task : <<return>> 

package "task" {
	interface "State" as task.State {
		+String(): string
	}
}



package "task" {
	interface "StateFactory" as task.StateFactory {
		+Closed(): task.State
		+Completed(): task.State
		+Doing(): task.State
		+Paused(): task.State
		+Todo(): task.State
	}
}


	task.StateFactory ..> task.State : <<return>> 
	task.StateFactory ..> task.State : <<return>> 
	task.StateFactory ..> task.State : <<return>> 
	task.StateFactory ..> task.State : <<return>> 
	task.StateFactory ..> task.State : <<return>> 

package "task" {
	interface "Task" as task.Task {
		+GetDescription(): string
		+GetState(): task.State
		+GetTitle(): string
		-setState(state: task.State): task.Task
	}
}


	task.Task ..> task.State : <<return>> 

package "task" {
	class "stateClosed" as task.stateClosed <<V,Orchid>> {
		+String(): string
	}
}



package "task" {
	class "stateCompleted" as task.stateCompleted <<V,Orchid>> {
		+String(): string
	}
}



package "task" {
	class "stateDoing" as task.stateDoing <<V,Orchid>> {
		+String(): string
	}
}



package "task" {
	class "stateFactory" as task.stateFactory <<V,Orchid>> {
		+Todo(): task.State
		+Doing(): task.State
		+Paused(): task.State
		+Completed(): task.State
		+Closed(): task.State
	}
}


	task.stateFactory ..> task.State : <<return>> 
	task.stateFactory ..> task.State : <<return>> 
	task.stateFactory ..> task.State : <<return>> 
	task.stateFactory ..> task.State : <<return>> 
	task.stateFactory ..> task.State : <<return>> 

package "task" {
	class "statePaused" as task.statePaused <<V,Orchid>> {
		+String(): string
	}
}



package "task" {
	class "stateTodo" as task.stateTodo <<V,Orchid>> {
		+String(): string
	}
}



package "task" {
	class "task" as task.task <<V,Orchid>> {
		-id: int
		-title: string
		-description: string
		-state: task.State
		+GetTitle(): string
		+GetDescription(): string
		+GetState(): task.State
		-setState(state: task.State): task.Task
	}
}

	task.task --> task.State

	task.task ..> task.State : <<return>> 

package "task" {
	class "taskFactory" as task.taskFactory <<V,Orchid>> {
		-stateFactory: task.StateFactory
		+New(id: int, title: string, description: string, state: task.State): task.Task
		+Start(task: task.Task): task.Task
		+Stop(task: task.Task): task.Task
		+Pause(task: task.Task): task.Task
		+Complete(task: task.Task): task.Task
		+Close(task: task.Task): task.Task
	}
}

	task.taskFactory --> task.StateFactory

	task.taskFactory ..> task.State : <<use>> 
	task.taskFactory ..> task.Task : <<return>> 
	task.taskFactory ..> task.Task : <<use>> 
	task.taskFactory ..> task.Task : <<return>> 
	task.taskFactory ..> task.Task : <<use>> 
	task.taskFactory ..> task.Task : <<return>> 
	task.taskFactory ..> task.Task : <<use>> 
	task.taskFactory ..> task.Task : <<return>> 
	task.taskFactory ..> task.Task : <<use>> 
	task.taskFactory ..> task.Task : <<return>> 
	task.taskFactory ..> task.Task : <<use>> 
	task.taskFactory ..> task.Task : <<return>> 

	task.stateClosed -up-|> task.State
	task.stateCompleted -up-|> task.State
	task.stateDoing -up-|> task.State
	task.stateFactory -up-|> task.StateFactory
	task.statePaused -up-|> task.State
	task.stateTodo -up-|> task.State
	task.task -up-|> task.Task
	task.taskFactory -up-|> task.Factory
@enduml
